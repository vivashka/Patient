@page "/"
@using Models
@using System.Text.Json;

@using System.Text.Json.Serialization;

@inject DialogService DialogService



<RadzenText TextStyle="TextStyle.H5">Header</RadzenText>

<RadzenButton TextStyle="TextStyle.Body1" Click=@(args => ShowAddPatient()) Text="Добавить пациента" ButtonStyle="ButtonStyle.Primary" class="rz-border-radius-10" />

<RadzenDataGrid @ref="patientsGrid" TItem="Patient" Data="@Data">
    <Columns >
        <RadzenDataGridColumn TItem="Patient" Property="Firstname" Title="Фамилия" />
        <RadzenDataGridColumn TItem="Patient" Property="Surname" Title="Имя" />
        <RadzenDataGridColumn TItem="Patient" Property="Patronymic" Title="Отчество">
            <Template Context="Data">
                <RadzenText> @(Data.Patronymic ?? "Отсутствует") </RadzenText>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Patient" Property="BirthDate" Title="Возраст">
            <Template Context="Data">
                <RadzenText> @((new DateTime(1, 1, 1) + DateTime.UtcNow.Subtract(Data.BirthDate)).Year - 1) </RadzenText>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Patient" Property="Snils.DocumentNumber" Title="СНИЛС">
            <Template Context="Data">
                <RadzenText> @(Data.Snils.DocumentNumber ?? "Отсутствует") </RadzenText>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Patient" Title="Доп. Инфо">
            <Template Context="Data">
                <RadzenButton Click=@(args => ShowAdditionalInfo(Data)) Text="Подробнее"
                    ButtonStyle="ButtonStyle.Primary" />
            </Template>
        </RadzenDataGridColumn>
        </Columns>
</RadzenDataGrid>

@code {
    [Parameter] public List<Patient>? Data { get; set; } = new List<Patient>();
    RadzenDataGrid<Patient> patientsGrid;
    
    protected override void OnInitialized()
    {
        string json = File.ReadAllText(@"patients.json");
        Data = JsonSerializer.Deserialize < List <Patient>> (json,
            new JsonSerializerOptions() { IgnoreNullValues = true });
    }

    async Task ShowAdditionalInfo(Patient patient)
    {
        await DialogService.OpenAsync("", ds => @<AdditionalViewComponent OnePatient="patient" />,
        new DialogOptions() { CloseDialogOnOverlayClick = true, Width = "max-content", ShowTitle = false});
    }

    async Task ShowAddPatient()
    {
        await DialogService.OpenAsync("", ds => @<AddPatientViewComponent AddToList="AddNewPatient" />,
         new DialogOptions() { CloseDialogOnOverlayClick = true, Width = "max-content", ShowTitle = false });
    }


    async Task AddNewPatient(Patient newPatient)
    {
        Data.Insert(0, newPatient);
        await patientsGrid.InsertRow(newPatient);
        JsonSerializerOptions option = new JsonSerializerOptions {
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            };
        string newJson = JsonSerializer.Serialize(Data, option);
        File.WriteAllText(@"patients.json", newJson);
        
    }
    

}